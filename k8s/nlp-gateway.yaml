apiVersion: apps/v1
kind: Deployment
metadata:
  name: nlp-gateway
  namespace: quantum-nlp
  labels:
    app: nlp-gateway
    app.kubernetes.io/name: nlp-gateway
    app.kubernetes.io/component: api-gateway
    app.kubernetes.io/part-of: quantum-nlp
spec:
  replicas: 3
  selector:
    matchLabels:
      app: nlp-gateway
  template:
    metadata:
      labels:
        app: nlp-gateway
        app.kubernetes.io/name: nlp-gateway
        app.kubernetes.io/component: api-gateway
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8080"
        prometheus.io/path: "/metrics"
    spec:
      imagePullSecrets:
        - name: docker-registry-secret
      containers:
        - name: nlp-gateway
          image: ghcr.io/quantumlayerplatform-nlp/quantum-nlp-nlp-gateway:latest
          ports:
            - containerPort: 8080
              name: http
              protocol: TCP
          env:
            - name: ENVIRONMENT
              value: "production"
            - name: PORT
              value: "8080"
            - name: DB_HOST
              value: "postgresql"
            - name: DB_PORT
              value: "5432"
            - name: DB_NAME
              value: "quantum_nlp"
            - name: DB_USER
              value: "quantum_user"
            - name: DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: quantum-nlp-secrets
                  key: DB_PASSWORD
            - name: REDIS_HOST
              value: "redis"
            - name: REDIS_PORT
              value: "6379"
            - name: NEO4J_URI
              value: "bolt://neo4j:7687"
            - name: NEO4J_USERNAME
              value: "neo4j"
            - name: NEO4J_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: quantum-nlp-secrets
                  key: NEO4J_PASSWORD
            - name: JWT_SECRET
              valueFrom:
                secretKeyRef:
                  name: quantum-nlp-secrets
                  key: JWT_SECRET
            - name: AZURE_OPENAI_API_KEY
              valueFrom:
                secretKeyRef:
                  name: quantum-nlp-secrets
                  key: AZURE_OPENAI_API_KEY
            - name: AWS_ACCESS_KEY_ID
              valueFrom:
                secretKeyRef:
                  name: quantum-nlp-secrets
                  key: AWS_ACCESS_KEY_ID
            - name: AWS_SECRET_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  name: quantum-nlp-secrets
                  key: AWS_SECRET_ACCESS_KEY
          
          volumeMounts:
            - name: config-volume
              mountPath: /app/config
              readOnly: true
          
          livenessProbe:
            httpGet:
              path: /health
              port: 8080
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 3
          
          readinessProbe:
            httpGet:
              path: /ready
              port: 8080
            initialDelaySeconds: 5
            periodSeconds: 5
            timeoutSeconds: 3
            successThreshold: 1
            failureThreshold: 3
          
          resources:
            requests:
              memory: "512Mi"
              cpu: "250m"
            limits:
              memory: "2Gi"
              cpu: "1000m"
          
          securityContext:
            runAsNonRoot: true
            runAsUser: 1000
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            capabilities:
              drop:
                - ALL
      
      volumes:
        - name: config-volume
          configMap:
            name: quantum-nlp-config
      
      securityContext:
        fsGroup: 1000
      
      terminationGracePeriodSeconds: 30

---
apiVersion: v1
kind: Service
metadata:
  name: nlp-gateway
  namespace: quantum-nlp
  labels:
    app: nlp-gateway
    app.kubernetes.io/name: nlp-gateway
    app.kubernetes.io/component: api-gateway
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "8080"
    prometheus.io/path: "/metrics"
spec:
  type: ClusterIP
  ports:
    - port: 8080
      targetPort: 8080
      protocol: TCP
      name: http
  selector:
    app: nlp-gateway

---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: nlp-gateway-ingress
  namespace: quantum-nlp
  labels:
    app: nlp-gateway
  annotations:
    kubernetes.io/ingress.class: nginx
    cert-manager.io/cluster-issuer: letsencrypt-prod
    nginx.ingress.kubernetes.io/rate-limit: "100"
    nginx.ingress.kubernetes.io/rate-limit-window: "1m"
    nginx.ingress.kubernetes.io/proxy-body-size: "10m"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "300"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "300"
    nginx.ingress.kubernetes.io/enable-cors: "true"
    nginx.ingress.kubernetes.io/cors-allow-methods: "GET, POST, PUT, DELETE, OPTIONS"
    nginx.ingress.kubernetes.io/cors-allow-headers: "DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Authorization"
spec:
  tls:
    - hosts:
        - api.quantum-nlp.example.com
      secretName: api-tls-secret
  rules:
    - host: api.quantum-nlp.example.com
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: nlp-gateway
                port:
                  number: 8080

---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: nlp-gateway-pdb
  namespace: quantum-nlp
  labels:
    app: nlp-gateway
spec:
  minAvailable: 2
  selector:
    matchLabels:
      app: nlp-gateway

---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: nlp-gateway-hpa
  namespace: quantum-nlp
  labels:
    app: nlp-gateway
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: nlp-gateway
  minReplicas: 3
  maxReplicas: 20
  metrics:
    - type: Resource
      resource:
        name: cpu
        target:
          type: Utilization
          averageUtilization: 70
    - type: Resource
      resource:
        name: memory
        target:
          type: Utilization
          averageUtilization: 80
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
        - type: Percent
          value: 50
          periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
        - type: Percent
          value: 100
          periodSeconds: 30
        - type: Pods
          value: 2
          periodSeconds: 30
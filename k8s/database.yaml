apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: postgresql-pvc
  namespace: quantum-nlp
  labels:
    app: postgresql
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 20Gi
  storageClassName: fast-ssd

---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: postgresql
  namespace: quantum-nlp
  labels:
    app: postgresql
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/component: database
spec:
  serviceName: postgresql-headless
  replicas: 1
  selector:
    matchLabels:
      app: postgresql
  template:
    metadata:
      labels:
        app: postgresql
        app.kubernetes.io/name: postgresql
        app.kubernetes.io/component: database
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9187"
        prometheus.io/path: "/metrics"
    spec:
      securityContext:
        fsGroup: 999
      containers:
        - name: postgresql
          image: postgres:15-alpine
          env:
            - name: POSTGRES_DB
              value: quantum_nlp
            - name: POSTGRES_USER
              value: quantum_user
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: quantum-nlp-secrets
                  key: DB_PASSWORD
            - name: PGDATA
              value: /var/lib/postgresql/data/pgdata
          ports:
            - containerPort: 5432
              name: postgresql
          volumeMounts:
            - name: postgresql-storage
              mountPath: /var/lib/postgresql/data
            - name: postgresql-config
              mountPath: /etc/postgresql/postgresql.conf
              subPath: postgresql.conf
          livenessProbe:
            exec:
              command:
                - /bin/sh
                - -c
                - pg_isready -U quantum_user -d quantum_nlp
            initialDelaySeconds: 30
            periodSeconds: 10
          readinessProbe:
            exec:
              command:
                - /bin/sh
                - -c
                - pg_isready -U quantum_user -d quantum_nlp
            initialDelaySeconds: 5
            periodSeconds: 5
          resources:
            requests:
              memory: "512Mi"
              cpu: "250m"
            limits:
              memory: "2Gi"
              cpu: "1000m"
        
        - name: postgres-exporter
          image: prometheuscommunity/postgres-exporter:v0.12.0
          env:
            - name: DATA_SOURCE_NAME
              value: "postgresql://quantum_user:$(POSTGRES_PASSWORD)@localhost:5432/quantum_nlp?sslmode=disable"
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: quantum-nlp-secrets
                  key: DB_PASSWORD
          ports:
            - containerPort: 9187
              name: metrics
          resources:
            requests:
              memory: "64Mi"
              cpu: "50m"
            limits:
              memory: "128Mi"
              cpu: "100m"
      
      volumes:
        - name: postgresql-storage
          persistentVolumeClaim:
            claimName: postgresql-pvc
        - name: postgresql-config
          configMap:
            name: postgresql-config

  volumeClaimTemplates:
    - metadata:
        name: postgresql-storage
      spec:
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: 20Gi
        storageClassName: fast-ssd

---
apiVersion: v1
kind: Service
metadata:
  name: postgresql
  namespace: quantum-nlp
  labels:
    app: postgresql
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/component: database
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "9187"
spec:
  type: ClusterIP
  ports:
    - port: 5432
      targetPort: 5432
      protocol: TCP
      name: postgresql
    - port: 9187
      targetPort: 9187
      protocol: TCP
      name: metrics
  selector:
    app: postgresql

---
apiVersion: v1
kind: Service
metadata:
  name: postgresql-headless
  namespace: quantum-nlp
  labels:
    app: postgresql
spec:
  type: ClusterIP
  clusterIP: None
  ports:
    - port: 5432
      targetPort: 5432
      protocol: TCP
      name: postgresql
  selector:
    app: postgresql

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: postgresql-config
  namespace: quantum-nlp
  labels:
    app: postgresql
data:
  postgresql.conf: |
    # PostgreSQL configuration for Quantum NLP Platform
    listen_addresses = '*'
    port = 5432
    max_connections = 200
    shared_buffers = 256MB
    effective_cache_size = 1GB
    maintenance_work_mem = 64MB
    checkpoint_completion_target = 0.9
    wal_buffers = 16MB
    default_statistics_target = 100
    random_page_cost = 1.1
    effective_io_concurrency = 200
    
    # Logging
    log_destination = 'stderr'
    logging_collector = on
    log_directory = 'pg_log'
    log_filename = 'postgresql-%Y-%m-%d_%H%M%S.log'
    log_statement = 'mod'
    log_min_duration_statement = 1000
    
    # Replication (for future HA setup)
    wal_level = replica
    max_wal_senders = 3
    max_replication_slots = 3

---
# Redis deployment
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: redis-pvc
  namespace: quantum-nlp
  labels:
    app: redis
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi
  storageClassName: fast-ssd

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis
  namespace: quantum-nlp
  labels:
    app: redis
    app.kubernetes.io/name: redis
    app.kubernetes.io/component: cache
spec:
  replicas: 1
  selector:
    matchLabels:
      app: redis
  template:
    metadata:
      labels:
        app: redis
        app.kubernetes.io/name: redis
        app.kubernetes.io/component: cache
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9121"
        prometheus.io/path: "/metrics"
    spec:
      containers:
        - name: redis
          image: redis:7-alpine
          command:
            - redis-server
            - /etc/redis/redis.conf
          ports:
            - containerPort: 6379
              name: redis
          volumeMounts:
            - name: redis-storage
              mountPath: /data
            - name: redis-config
              mountPath: /etc/redis
          livenessProbe:
            exec:
              command:
                - redis-cli
                - ping
            initialDelaySeconds: 30
            periodSeconds: 10
          readinessProbe:
            exec:
              command:
                - redis-cli
                - ping
            initialDelaySeconds: 5
            periodSeconds: 5
          resources:
            requests:
              memory: "256Mi"
              cpu: "100m"
            limits:
              memory: "1Gi"
              cpu: "500m"
        
        - name: redis-exporter
          image: oliver006/redis_exporter:v1.55.0
          env:
            - name: REDIS_ADDR
              value: "redis://localhost:6379"
          ports:
            - containerPort: 9121
              name: metrics
          resources:
            requests:
              memory: "32Mi"
              cpu: "25m"
            limits:
              memory: "64Mi"
              cpu: "50m"
      
      volumes:
        - name: redis-storage
          persistentVolumeClaim:
            claimName: redis-pvc
        - name: redis-config
          configMap:
            name: redis-config

---
apiVersion: v1
kind: Service
metadata:
  name: redis
  namespace: quantum-nlp
  labels:
    app: redis
    app.kubernetes.io/name: redis
    app.kubernetes.io/component: cache
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "9121"
spec:
  type: ClusterIP
  ports:
    - port: 6379
      targetPort: 6379
      protocol: TCP
      name: redis
    - port: 9121
      targetPort: 9121
      protocol: TCP
      name: metrics
  selector:
    app: redis

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: redis-config
  namespace: quantum-nlp
  labels:
    app: redis
data:
  redis.conf: |
    # Redis configuration for Quantum NLP Platform
    bind 0.0.0.0
    port 6379
    timeout 300
    keepalive 60
    maxclients 10000
    maxmemory 512mb
    maxmemory-policy allkeys-lru
    
    # Persistence
    save 900 1
    save 300 10
    save 60 10000
    rdbcompression yes
    rdbchecksum yes
    dbfilename dump.rdb
    dir /data
    
    # Logging
    loglevel notice
    logfile /data/redis.log
    
    # Security
    # requirepass your_redis_password_here